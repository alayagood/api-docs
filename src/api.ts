/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * web-api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://alaya.reviews/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * See npm [cuid package](https://www.npmjs.com/package/cuid) for details
 * @export
 */
export type Cuid = string
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * Organizations options list
     * @type {Array<OrganizationSelectorOption>}
     * @memberof InlineResponse200
     */
    data?: Array<OrganizationSelectorOption>;
    /**
     * Initial selector organizations options list
     * @type {Array<OrganizationSelectorOption>}
     * @memberof InlineResponse200
     */
    init?: Array<OrganizationSelectorOption>;
    /**
     * 
     * @type {Page}
     * @memberof InlineResponse200
     */
    page?: Page;
    /**
     * 
     * @type {PageSize}
     * @memberof InlineResponse200
     */
    pageSize?: PageSize;
    /**
     * elements count over all pages
     * @type {number}
     * @memberof InlineResponse200
     */
    count?: number;
    /**
     * true if more pages can be loaded
     * @type {boolean}
     * @memberof InlineResponse200
     */
    hasMore?: boolean;
    /**
     * the filter requested
     * @type {string}
     * @memberof InlineResponse200
     */
    search?: string;
}
/**
 * Errors JSON object are rendered by the `errorRenderer` by the global catcher on the API server.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code: ModelError.CodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    stack?: string;
}

/**
 * @export
 * @namespace ModelError
 */
export namespace ModelError {
    /**
     * @export
     * @enum {string}
     */
    export enum CodeEnum {
        NUMBER_400 = <any> 400,
        NUMBER_401 = <any> 401,
        NUMBER_403 = <any> 403,
        NUMBER_404 = <any> 404,
        NUMBER_500 = <any> 500
    }
}
/**
 * 
 * @export
 * @interface OrganizationSelectorOption
 */
export interface OrganizationSelectorOption {
    /**
     * 
     * @type {Cuid}
     * @memberof OrganizationSelectorOption
     */
    cuid: Cuid;
    /**
     * 
     * @type {string}
     * @memberof OrganizationSelectorOption
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationSelectorOption
     */
    logoUrl: string;
}
/**
 * 
 * @export
 */
export type Page = number
/**
 * For `default`, see `DEFAULT_PAGE_SIZE`, and for `maximum` see `MAX_PAGE_SIZE`
 * @export
 */
export type PageSize = number
/**
 * CharityApi - fetch parameter creator
 * @export
 */
export const CharityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Filtering: - Charities with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Charity selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharityOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/charity/selector`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("sk-4_15_0")
					: configuration.apiKey;
                localVarQueryParameter["sk-4_15_0"] = localVarApiKeyValue;
            }

            if (init) {
                localVarQueryParameter['init'] = init;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CharityApi - functional programming interface
 * @export
 */
export const CharityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Filtering: - Charities with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Charity selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharityOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = CharityApiFetchParamCreator(configuration).listCharityOptions(init, page, pageSize, search, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CharityApi - factory interface
 * @export
 */
export const CharityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Filtering: - Charities with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Charity selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharityOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any) {
            return CharityApiFp(configuration).listCharityOptions(init, page, pageSize, search, options)(fetch, basePath);
        },
    };
};

/**
 * CharityApi - object-oriented interface
 * @export
 * @class CharityApi
 * @extends {BaseAPI}
 */
export class CharityApi extends BaseAPI {
    /**
     * Filtering: - Charities with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
     * @summary Charity selector endpoint
     * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
     * @param {Page} [page] The pagination page number
     * @param {PageSize} [pageSize] The pagination page size.
     * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharityApi
     */
    public listCharityOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any) {
        return CharityApiFp(this.configuration).listCharityOptions(init, page, pageSize, search, options)(this.fetch, this.basePath);
    }

}
/**
 * OrganizationApi - fetch parameter creator
 * @export
 */
export const OrganizationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of paginated options for selection. Filtering: - Organizations with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Organization selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/organization/selector`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("sk-4_15_0")
					: configuration.apiKey;
                localVarQueryParameter["sk-4_15_0"] = localVarApiKeyValue;
            }

            if (init) {
                localVarQueryParameter['init'] = init;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a list of paginated options for selection. Filtering: - Organizations with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Organization selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = OrganizationApiFetchParamCreator(configuration).listOrganizationOptions(init, page, pageSize, search, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns a list of paginated options for selection. Filtering: - Organizations with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Organization selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any) {
            return OrganizationApiFp(configuration).listOrganizationOptions(init, page, pageSize, search, options)(fetch, basePath);
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * Returns a list of paginated options for selection. Filtering: - Organizations with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
     * @summary Organization selector endpoint
     * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
     * @param {Page} [page] The pagination page number
     * @param {PageSize} [pageSize] The pagination page size.
     * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public listOrganizationOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any) {
        return OrganizationApiFp(this.configuration).listOrganizationOptions(init, page, pageSize, search, options)(this.fetch, this.basePath);
    }

}
/**
 * SelectorApi - fetch parameter creator
 * @export
 */
export const SelectorApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Filtering: - Charities with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Charity selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharityOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/charity/selector`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("sk-4_15_0")
					: configuration.apiKey;
                localVarQueryParameter["sk-4_15_0"] = localVarApiKeyValue;
            }

            if (init) {
                localVarQueryParameter['init'] = init;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of paginated options for selection. Filtering: - Organizations with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Organization selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/organization/selector`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("sk-4_15_0")
					: configuration.apiKey;
                localVarQueryParameter["sk-4_15_0"] = localVarApiKeyValue;
            }

            if (init) {
                localVarQueryParameter['init'] = init;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SelectorApi - functional programming interface
 * @export
 */
export const SelectorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Filtering: - Charities with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Charity selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharityOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = SelectorApiFetchParamCreator(configuration).listCharityOptions(init, page, pageSize, search, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of paginated options for selection. Filtering: - Organizations with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Organization selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = SelectorApiFetchParamCreator(configuration).listOrganizationOptions(init, page, pageSize, search, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SelectorApi - factory interface
 * @export
 */
export const SelectorApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Filtering: - Charities with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Charity selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharityOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any) {
            return SelectorApiFp(configuration).listCharityOptions(init, page, pageSize, search, options)(fetch, basePath);
        },
        /**
         * Returns a list of paginated options for selection. Filtering: - Organizations with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
         * @summary Organization selector endpoint
         * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
         * @param {Page} [page] The pagination page number
         * @param {PageSize} [pageSize] The pagination page size.
         * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any) {
            return SelectorApiFp(configuration).listOrganizationOptions(init, page, pageSize, search, options)(fetch, basePath);
        },
    };
};

/**
 * SelectorApi - object-oriented interface
 * @export
 * @class SelectorApi
 * @extends {BaseAPI}
 */
export class SelectorApi extends BaseAPI {
    /**
     * Filtering: - Charities with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
     * @summary Charity selector endpoint
     * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
     * @param {Page} [page] The pagination page number
     * @param {PageSize} [pageSize] The pagination page size.
     * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelectorApi
     */
    public listCharityOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any) {
        return SelectorApiFp(this.configuration).listCharityOptions(init, page, pageSize, search, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of paginated options for selection. Filtering: - Organizations with attribute `locked` at `true` are filtered out. - If `search` is provided as a request query parameter, a regex case-insensitive search is performed on the organization `name` - `page` (skip) and `pageSize` (limit) narrows the amount of elements retrieved.  Sorting: - If `search` is not provided, order is by `creationDate`, most recent *first*. - If `search` is provided, alphabetical order on name.  Initial element: - `init` parameter is the initial value of the selector. It will follow the same pattern as the selector options (`OrganizationSelectorOption`). - If an entity is not found by its `cuid`, the element is omitted from the response. 
     * @summary Organization selector endpoint
     * @param {Array<Cuid>} [init] &#x60;init&#x60; parameter is the initial value of the selector.  The value can be multiple cuids of organizations. It is a query parameter that corresponds exactly to the cuids of one or more organizations, separated by commas. 
     * @param {Page} [page] The pagination page number
     * @param {PageSize} [pageSize] The pagination page size.
     * @param {string} [search] A free text value to narrow the search depending on context. Could be a name for regex or a strict cuid. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelectorApi
     */
    public listOrganizationOptions(init?: Array<Cuid>, page?: Page, pageSize?: PageSize, search?: string, options?: any) {
        return SelectorApiFp(this.configuration).listOrganizationOptions(init, page, pageSize, search, options)(this.fetch, this.basePath);
    }

}
